package com.it52.notificationservice.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.it52.notificationservice.dto.EventDto;
import com.it52.notificationservice.util.MailService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Configuration
@EnableKafka
@Service
public class NotificationService {

    private static final Logger logger = LoggerFactory.getLogger(NotificationService.class);
    private final MailService mailService;
    private final ObjectMapper objectMapper;

    public NotificationService(MailService mailService, ObjectMapper objectMapper) {
        this.mailService = mailService;
        this.objectMapper = objectMapper;
    }

    @KafkaListener(topics = "event_created", groupId = "notification-group")
    public void listen(String eventJson) {
        try {
            // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON-—Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç EventDto
            EventDto event = objectMapper.readValue(eventJson, EventDto.class);

            String subject = "–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: " + event.getTitle();

            StringBuilder body = new StringBuilder();
            body.append("–ü–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n")
                    .append("üìå –ù–∞–∑–≤–∞–Ω–∏–µ: ").append(event.getTitle()).append("\n")
                    .append("üìù –û–ø–∏—Å–∞–Ω–∏–µ: ").append(event.getDescription()).append("\n")
                    .append("üóì –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ").append(event.getStartedAt() != null ? event.getStartedAt() : "–Ω–µ —É–∫–∞–∑–∞–Ω–∞").append("\n")
                    .append("üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: ").append(event.getPlace()).append("\n")
                    .append("üè† –ê–¥—Ä–µ—Å: ").append(event.getAddress()).append("\n");

            if (event.getAddressComment() != null && !event.getAddressComment().isBlank()) {
                body.append("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–¥—Ä–µ—Å—É: ").append(event.getAddressComment()).append("\n");
            }

            body.append("üë§ –ê–≤—Ç–æ—Ä: ").append(event.getAuthorName()).append("\n")
                    .append("üí∞ –£—á–∞—Å—Ç–∏–µ: ").append(event.getTypePrice()).append("\n")
                    .append("üìÑ –°—Ç–∞—Ç—É—Å: ").append(event.getStatus()).append("\n")
                    .append("üîó –°—Å—ã–ª–∫–∞: ").append(event.getExternalUrl() != null ? event.getExternalUrl() : "–Ω–µ —É–∫–∞–∑–∞–Ω–∞").append("\n");

            if (event.getTags() != null && !event.getTags().isEmpty()) {
                body.append("üè∑ –¢–µ–≥–∏: ").append(String.join(", ", event.getTags())).append("\n");
            }

            logger.info("Sending email to Danil1998borisov1@yandex.ru with subject: {}", subject);
            mailService.sendEmail("Danil1998borisov1@yandex.ru", subject, body.toString());
            logger.info("Email sent successfully");

        } catch (Exception e) {
            logger.error("Failed to process event or send email: {}", e.getMessage(), e);
        }
    }
}


